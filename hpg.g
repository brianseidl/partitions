hpg := function(G)
	
	# % First we find the prime divisors of G
	n := Size(G);
	divs := DivisorsInt(n);
	count := 0;
	
	# % here we check if each divisor is prime
	# % if it is, we store it in primedivs
	for i in [1 .. Length(divs)] do
		if IsPrime(divs[i]) = true then
			count := count + 1;
		fi ;
	od;
	
	# % the loop below seems redundant to the one above, but GAP seems to want
	# % primedivs to exist before I can assign values to it
	primedivs := [1 .. count];
	count := 0;
	
	for i in [1 .. Length(divs)] do
		if IsPrime(divs[i]) = true then
			count := count + 1;
			primedivs[count] := divs[i];
		fi;
	od;
	
	r := Length(primedivs);
	
	# % Now we want to find how many elements have the property
	# % that x^p <> 1, for each p:
	# % e is a list of all elements of G
	e := Elements(G);
	axp := [1 .. r];
	
	# % main loop to get all x such that x^p <> 1
	for i in [1 .. r] do
		count := 0;
		for j in [1 .. n] do
			# % b compares element j^p = 1
			b := e[j]^primedivs[i] <> e[1];
			if b = true then
				count := count + 1;
			fi ;
		od;
	
		xp := [1 .. count];
		count := 0;
		
		for j in [1 .. n] do
			b := e[j]^primedivs[i] <> e[1];pnum
			if b = true then
				count := count + 1;
				xp[count] := e[j];
			fi;
		od;
		axp[i] := xp;
	od;
	
	# % now axp is an array that stores all the x^p <> 1 for each p | n
	# % we should check if the group generated by those things is G
	
	# % isg will be a boolean list that for each p, says true if the
	# % group generated by all x^p <> 1 is G
	isg := [1 .. r];
	
	for i in [1 .. r] do
		Gt := Subgroup(G,axp[i]);
		t := Size(Gt);
		if t = n then
			isg[i] := true;
		else
			isg[i] := false;
		fi ;
	od;
	
	# % So at the end we can look at isg. If isg contains a "false",
	# % G has a partition.
	
	return isg;	
end;